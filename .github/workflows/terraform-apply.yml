name: Terraform CI/CD

on:
  push:
    branches: [ main ]
    paths:
      - 'common-services/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
        - dev
        - staging
        - prod
      terraform_folder:
        description: 'Terraform folder to deploy'
        required: true
        default: 'common-services/argocd'
        type: choice
        options:
        - common-services/argocd
        - common-services/tfstate-s3

env:
  TF_VERSION: '1.13.4'
  AWS_REGION: 'us-east-1'

jobs:
  get-changed-folders:
    name: Get Changed Folders
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    outputs:
      folders: ${{ steps.changes.outputs.folders }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get Changed Folders
        id: changes
        run: |
          # Get list of changed files
          changed_files=$(git diff --name-only HEAD~1 HEAD)
          
          # Extract unique subdirectories under common-services
          folders=$(echo "$changed_files" | grep "^common-services/" | cut -d'/' -f1-2 | sort -u | jq -R -s -c 'split("\n")[:-1]')
          
          echo "folders=${folders}" >> $GITHUB_OUTPUT
          echo "Changed folders: ${folders}"

  terraform-validate:
    name: Terraform Validate
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    needs: get-changed-folders
    strategy:
      matrix:
        folder: ${{ fromJson(needs.get-changed-folders.outputs.folders) }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Terraform Format Check
        run: terraform fmt -check -recursive
        working-directory: ${{ matrix.folder }}

      - name: Terraform Init
        run: terraform init -backend=false
        working-directory: ${{ matrix.folder }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ matrix.folder }}

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch'
    environment: dev
    needs: [terraform-validate, get-changed-folders]
    strategy:
      matrix:
        folder: ${{ fromJson(needs.get-changed-folders.outputs.folders) }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ env.AWS_REGION }}
      TF_VAR_environment: dev
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ matrix.folder }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ matrix.folder }}

#   terraform-apply:
#     name: Terraform Apply
#     runs-on: ubuntu-latest
#     needs: [terraform-plan, get-changed-folders]
#     if: github.event_name == 'push' && github.ref == 'refs/heads/main'
#     strategy:
#       matrix:
#         folder: ${{ fromJson(needs.get-changed-folders.outputs.folders) }}
#     environment: ${{ github.event.inputs.environment }}
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v4

#       - name: Setup Terraform
#         uses: hashicorp/setup-terraform@v3
#         with:
#           terraform_version: ${{ env.TF_VERSION }}

#       - name: Configure AWS credentials
#         uses: aws-actions/configure-aws-credentials@v4
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}

#       - name: Download Terraform Plan
#         uses: actions/download-artifact@v4
#         with:
#           name: terraform-plan-${{ matrix.folder }}

#       - name: Terraform Init
#         run: terraform init
#         working-directory: ${{ matrix.folder }}

#       - name: Terraform Apply
#         run: terraform apply -auto-approve tfplan
#         working-directory: ${{ matrix.folder }}

  terraform-apply-manual:
    name: Terraform Apply (Manual)
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch'
    environment: ${{ github.event.inputs.environment }}
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ env.AWS_REGION }}
      TF_VAR_environment: ${{ github.event.inputs.environment }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init
        working-directory: ${{ github.event.inputs.terraform_folder }}

      - name: Terraform Validate
        run: terraform validate
        working-directory: ${{ github.event.inputs.terraform_folder }}

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: ${{ github.event.inputs.terraform_folder }}

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan
        working-directory: ${{ github.event.inputs.terraform_folder }}
